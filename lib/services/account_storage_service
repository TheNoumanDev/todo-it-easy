import 'dart:convert';
import 'dart:html' as html;

class StoredAccount {
  final String email;
  final String displayName;
  final String? photoUrl;
  final DateTime lastUsed;
  final bool isActive;

  StoredAccount({
    required this.email,
    required this.displayName,
    this.photoUrl,
    required this.lastUsed,
    this.isActive = true,
  });

  StoredAccount copyWith({
    String? email,
    String? displayName,
    String? photoUrl,
    DateTime? lastUsed,
    bool? isActive,
  }) {
    return StoredAccount(
      email: email ?? this.email,
      displayName: displayName ?? this.displayName,
      photoUrl: photoUrl ?? this.photoUrl,
      lastUsed: lastUsed ?? this.lastUsed,
      isActive: isActive ?? this.isActive,
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'email': email,
      'displayName': displayName,
      'photoUrl': photoUrl,
      'lastUsed': lastUsed.toIso8601String(),
      'isActive': isActive,
    };
  }

  static StoredAccount fromJson(Map<String, dynamic> json) {
    return StoredAccount(
      email: json['email'] as String,
      displayName: json['displayName'] as String,
      photoUrl: json['photoUrl'] as String?,
      lastUsed: DateTime.parse(json['lastUsed'] as String),
      isActive: json['isActive'] as bool? ?? true,
    );
  }
}

class AccountStorageService {
  static const String _accountsKey = 'google_accounts';
  static const String _lastAccountKey = 'last_active_account';

  // Save account to storage
  static Future<void> saveAccount(StoredAccount account) async {
    final accounts = await getStoredAccounts();
    
    // Update existing account or add new one
    final existingIndex = accounts.indexWhere((a) => a.email == account.email);
    if (existingIndex >= 0) {
      accounts[existingIndex] = account.copyWith(lastUsed: DateTime.now());
    } else {
      accounts.add(account.copyWith(lastUsed: DateTime.now()));
    }
    
    // Save updated list
    await _saveAccountsList(accounts);
    
    // Set as last active account
    await _setLastActiveAccount(account.email);
  }

  // Get all stored accounts
  static Future<List<StoredAccount>> getStoredAccounts() async {
    try {
      final accountsJson = html.window.localStorage[_accountsKey];
      if (accountsJson == null) return [];
      
      final List<dynamic> accountsList = jsonDecode(accountsJson);
      return accountsList.map((json) => StoredAccount.fromJson(json)).toList();
    } catch (e) {
      print('Error loading stored accounts: $e');
      return [];
    }
  }

  // Get active accounts (enabled for auto-login)
  static Future<List<StoredAccount>> getActiveAccounts() async {
    final accounts = await getStoredAccounts();
    return accounts.where((account) => account.isActive).toList();
  }

  // Remove account from storage
  static Future<void> removeAccount(String email) async {
    final accounts = await getStoredAccounts();
    accounts.removeWhere((account) => account.email == email);
    await _saveAccountsList(accounts);
    
    // If removed account was last active, clear that too
    if (await getLastActiveAccount() == email) {
      html.window.localStorage.remove(_lastAccountKey);
    }
  }

  // Toggle account active status
  static Future<void> toggleAccountActive(String email, bool isActive) async {
    final accounts = await getStoredAccounts();
    final index = accounts.indexWhere((a) => a.email == email);
    
    if (index >= 0) {
      accounts[index] = accounts[index].copyWith(isActive: isActive);
      await _saveAccountsList(accounts);
    }
  }

  // Get last active account
  static Future<String?> getLastActiveAccount() async {
    return html.window.localStorage[_lastAccountKey];
  }

  // Set last active account
  static Future<void> _setLastActiveAccount(String email) async {
    html.window.localStorage[_lastAccountKey] = email;
  }

  // Clear all stored accounts
  static Future<void> clearAllAccounts() async {
    html.window.localStorage.remove(_accountsKey);
    html.window.localStorage.remove(_lastAccountKey);
  }

  // Private helper to save accounts list
  static Future<void> _saveAccountsList(List<StoredAccount> accounts) async {
    final accountsJson = jsonEncode(accounts.map((a) => a.toJson()).toList());
    html.window.localStorage[_accountsKey] = accountsJson;
  }

  // Check if account exists in storage
  static Future<bool> hasAccount(String email) async {
    final accounts = await getStoredAccounts();
    return accounts.any((account) => account.email == email);
  }

  // Get account count
  static Future<int> getAccountCount() async {
    final accounts = await getStoredAccounts();
    return accounts.length;
  }

  // Get active account count
  static Future<int> getActiveAccountCount() async {
    final accounts = await getActiveAccounts();
    return accounts.length;
  }
}